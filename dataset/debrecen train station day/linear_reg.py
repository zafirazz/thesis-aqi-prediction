# -*- coding: utf-8 -*-
"""linear_regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ghizfEaQD0iTXiL_JQ8uSkwq5cqIMEPs
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import MinMaxScaler, StandardScaler
from sklearn.model_selection import train_test_split
from matplotlib import pyplot as plt
from sklearn.metrics import r2_score
from tensorflow.python.keras.losses import mean_squared_error, mean_absolute_error

df = pd.read_csv("data_for_model.csv")
df.shape

df

df["Date"] = df["Unnamed: 0"]
df.drop("Unnamed: 0", axis=1, inplace=True)

df["Date"] = pd.to_datetime(df["Date"])
df['year'] = df['Date'].dt.year
df['month'] = df['Date'].dt.month
df['day'] = df['Date'].dt.day
df['weekday'] = df['Date'].dt.weekday

df.set_index("Date", inplace=True)

df.isna().sum()

features = [
    "Station1_CO", "Station1_NO2", "Station1_NOx",
    "Station2_CO", "Station2_NO2", "Station2_NOx", "Station2_O3",
    "Station1_SO2", "Station2_SO2",
    "Station2_PM10", "temp", "humidity", "precip",
    "precipcover", "windspeed", "visibility",
    "winddir_sin", "winddir_cos", "is_heating_season", "is_work_day",
    "month", "day", "year", "weekday"
]
target = "Station1_PM10"

print(df.isnull().sum())
df.fillna(method="ffill", inplace=True)

scaler_target = StandardScaler()
df[target] = scaler_target.fit_transform(df[target].values.reshape(-1, 1))

train_data = df[(df['year'] < 2024) & (df['year'] > 2022)]
test_data = df[df['year'] == 2024]

X_train = train_data[features]
y_train = train_data[target]

X_test = test_data[features]
y_test = test_data[target]

# X_train, X_test, y_train, y_test = train_test_split(
#     df[features],
#     df[target],
#     test_size=0.2,
#     random_state=42
# )

model = LinearRegression()

model.fit(X_train, y_train)

y_pred = model.predict(X_test)

y_test_actual = scaler_target.inverse_transform(y_test.values.reshape(-1, 1)).flatten()
y_pred_actual = scaler_target.inverse_transform(y_pred.reshape(-1, 1)).flatten()

plt.figure(figsize=(12, 6))
plt.plot(y_test_actual, label='Actual PM10', marker='.')
plt.plot(y_pred_actual, label='Predicted PM10', marker='.', alpha=0.8)
plt.legend()
plt.title('PM10 Prediction with Linear Regression')
plt.xlabel('Test Sample Index')
plt.ylabel('PM10')
plt.show()

mae = mean_absolute_error(y_test_actual, y_pred_actual)
print(f"MAE: {mae}")
mse = mean_squared_error(y_test_actual, y_pred_actual)
print(f"MSE: {mse}")
r2 = r2_score(y_test_actual, y_pred_actual)
print(f"R2: {r2}")

import joblib

joblib.dump(model, 'pm10_prediction_model.pkl')

# prompt: generate a loss curve with loss from linear regression

import matplotlib.pyplot as plt

# Assuming you have already trained your model and have y_test_actual and y_pred_actual
# Replace this with your actual loss values if you have them from the training process
losses = [mean_absolute_error(y_test_actual[:i+1], y_pred_actual[:i+1]) for i in range(len(y_test_actual))]


plt.figure(figsize=(10, 6))
plt.plot(losses)
plt.xlabel("Epoch")  # or Iteration, depending on your training process
plt.ylabel("Mean Absolute Error")
plt.title("Loss Curve with 80:20 split")
plt.grid(True)
plt.show()

# prompt: generate a resiudal plot of errors vs predicted values

import matplotlib.pyplot as plt

# Calculate residuals
residuals = y_test_actual - y_pred_actual

# Create the residual plot
plt.figure(figsize=(10, 6))
plt.scatter(y_pred_actual, residuals)
plt.axhline(y=0, color='r', linestyle='--')  # Add a horizontal line at y=0
plt.xlabel("Predicted Values")
plt.ylabel("Residuals")
plt.title("Residual Plot with 80:20 split")
plt.show()

# prompt: generate a histogram of residuals

import matplotlib.pyplot as plt

# Assuming you have already calculated residuals as shown in the previous code:
# residuals = y_test_actual - y_pred_actual

plt.figure(figsize=(10, 6))
plt.hist(residuals, bins=30)  # Adjust the number of bins as needed
plt.xlabel("Residuals")
plt.ylabel("Frequency")
plt.title("Histogram of Residuals")
plt.grid(True)
plt.show()

